require 'msf/core'

class MetasploitModule < Msf::Auxiliary
  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      'Name'        => 'Custom Port Scanner',
      'Description' => %q{
        This module scans a range of ports on a target system and identifies which ones are open.
      },
      'Author'      => [ 'Your Name' ],
      'License'     => MSF_LICENSE
    ))

    register_options(
      [
        Opt::RHOST(),
        OptInt.new('STARTPORT', [true, 'Start of port range', 1]),
        OptInt.new('ENDPORT', [true, 'End of port range', 1024])
      ]
    )
  end

  def run
    rhost = datastore['RHOST']
    start_port = datastore['STARTPORT']
    end_port = datastore['ENDPORT']
    open_ports = []

    print_status("Running module against #{rhost}")

    (start_port..end_port).each do |port|
      begin
        ::Timeout.timeout(1) do
          connect(true, { 'RHOST' => rhost, 'RPORT' => port })
          print_good("#{rhost}:#{port} - Port #{port} is open on #{rhost}")
          open_ports << port
        end
      rescue ::Interrupt
        raise $!
      rescue ::Exception
        # Port is closed or filtered
      ensure
        disconnect rescue nil
      end
    end

    if open_ports.any?
      print_status("#{rhost}:#{open_ports.first} - Open ports on #{rhost}: #{open_ports.join(', ')}")
    else
      print_status("No open ports found on #{rhost} in range #{start_port}-#{end_port}")
    end
    print_status("Auxiliary module execution completed")
  end
end 